#define RCC_BASE        0x40023800U
#define RCC_AHB1ENR     (*(volatile unsigned int *)(RCC_BASE + 0x30))

#include <stdint.h>

#define GPIOA_BASE      0x40020000U
#define GPIOA_MODER     (*(volatile unsigned int *)(GPIOA_BASE + 0x00))
#define GPIOA_OTYPER    (*(volatile unsigned int *)(GPIOA_BASE + 0x04))
#define GPIOA_OSPEEDR   (*(volatile unsigned int *)(GPIOA_BASE + 0x08))
#define GPIOA_PUPDR     (*(volatile unsigned int *)(GPIOA_BASE + 0x0C))
#define GPIOA_ODR       (*(volatile unsigned int *)(GPIOA_BASE + 0x14))

void delay(volatile unsigned int count);

int main(void)
{
    // 1. Enable clock for GPIOA (bit 0 of RCC_AHB1ENR)
    RCC_AHB1ENR |= 0x1;

    // 2. Configure PA5 as output
    // Clear mode bits for PA5 (bits 10:11), then set as output (01)
    GPIOA_MODER &= ~(0x3 << (5 * 2));  // Clear bits 10 and 11
    GPIOA_MODER |=  (0x1 << (5 * 2));  // Set bit 10 = 1 (output mode)

    // 3. Set output type push-pull (bit 5 = 0)
    GPIOA_OTYPER &= ~(1 << 5);

    // 4. Set output speed medium (01) for PA5 (bits 10:11 in OSPEEDR)
    GPIOA_OSPEEDR &= ~(0x3 << (5 * 2));
    GPIOA_OSPEEDR |=  (0x1 << (5 * 2));

    // 5. No pull-up, pull-down (00) for PA5 (bits 10:11 in PUPDR)
    GPIOA_PUPDR &= ~(0x3 << (5 * 2));

    while(1)
    {
        // Toggle PA5 output data bit (bit 5)
        GPIOA_ODR ^= (1 << 5);

        delay(500000);
    }
}

void delay(volatile unsigned int count)
{
    while(count--) { }
}
