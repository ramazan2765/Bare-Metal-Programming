/*
 * keypad.c
 *
 *      Author: ramazan yücel
 */

#include "keypad.h"
#include "main.h"
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "string.h"
#include "stdio.h"
#include "RTC.h"

// Key mapping for a 4x4 matrix keypad
const char keymap[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, {
		'7', '8', '9', 'C' }, { '*', '0', '#', 'D' } };

char input[5];
const char pin[5] = "2765";
uint8_t buffer_index = 0;
uint8_t wrong_attempts  = 3;
extern uint8_t system_locked;

extern TIM_HandleTypeDef htim2;

char Keypad_GetKey(void) {
	// Define row GPIO ports and pins
	GPIO_TypeDef *row_ports[4] = {
	ROW1_PIN_GPIO_Port, ROW2_PIN_GPIO_Port,
	ROW3_PIN_GPIO_Port, ROW4_PIN_GPIO_Port };
	uint16_t row_pins[4] = {
	ROW1_PIN_Pin, ROW2_PIN_Pin,
	ROW3_PIN_Pin, ROW4_PIN_Pin };

	GPIO_TypeDef *col_ports[4] = {
	COL1_PIN_GPIO_Port, COL2_PIN_GPIO_Port,
	COL3_PIN_GPIO_Port, COL4_PIN_GPIO_Port };
	uint16_t col_pins[4] = {
	COL1_PIN_Pin, COL2_PIN_Pin,
	COL3_PIN_Pin, COL4_PIN_Pin };

	for (int row = 0; row < 4; row++) {
		// Tüm satırları HIGH yap
		for (int i = 0; i < 4; i++) {
			HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
		}

		// Aktif satırı LOW yap
		HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);

		HAL_Delay(1); // Kısa gecikme

		for (int col = 0; col < 4; col++) {
			if (HAL_GPIO_ReadPin(col_ports[col], col_pins[col])
					== GPIO_PIN_RESET) {
				HAL_Delay(20); // Kısa debounce
				// Tuşun gerçekten basılı olup olmadığını tekrar kontrol et
				if (HAL_GPIO_ReadPin(col_ports[col], col_pins[col])
						== GPIO_PIN_RESET) {
					// Tuş bırakılana kadar bekle (önemli!)
					while (HAL_GPIO_ReadPin(col_ports[col], col_pins[col])
							== GPIO_PIN_RESET)
						;
					return keymap[row][col];
				}
			}
		}
	}

	return 0; // Tuş yok
}

void Proccess_Input() {

	char key = Keypad_GetKey();

	ssd1306_SetCursor(0, 0);
	ssd1306_WriteString("PIN:", Font_11x18, White);
	ssd1306_SetCursor(0, 15);
	ssd1306_UpdateScreen();

    if(system_locked)
    {
		ssd1306_Fill(Black);
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString("***************", Font_7x10, White);
		ssd1306_SetCursor(0, 10);
		ssd1306_WriteString("System Locked", Font_7x10, White);
		ssd1306_SetCursor(0, 20);
		ssd1306_WriteString("for 10 seconds.", Font_7x10, White);
		ssd1306_SetCursor(0, 30);
		ssd1306_WriteString("***************", Font_7x10, White);
		ssd1306_UpdateScreen();
		ssd1306_Fill(Black);
        return;
    }

	if (key != 0) {
		static uint8_t cursor = 0;
		char str[2] = { key, '\0' }; // tek karakterlik string

		if (key == 'D') {
			input[buffer_index] = '\0';
			Proccess_Pin();
			cursor = 0;
			memset(input, 0, sizeof(input)); // buffer'ın içindeki tüm veriler sıfırlanır.
			buffer_index = 0;	// buffer'ı doldurmaya 0. indexten başlanacak.

		} else if (key == 'C') {
			Clean_Key();
			memset(input, 0, sizeof(input)); // buffer'ın içindeki tüm veriler sıfırlanır.
			buffer_index = 0;	// buffer'ı doldurmaya 0. indexten başlanacak.
			cursor = 0;
		} else {
			ssd1306_SetCursor((44 + ((cursor++) % 4) * 10), 0); // x konumunu ilerlet ve en fazla 4 rakamli sifre
			ssd1306_WriteString(str, Font_11x18, White);
			ssd1306_UpdateScreen();
			input[buffer_index++] = key;
		}
	}
}

void Clean_Key() {

	ssd1306_Fill(Black);
	ssd1306_SetCursor(0, 0);
	ssd1306_WriteString("CLEAN  ", Font_11x18, White);
	ssd1306_UpdateScreen();
	HAL_Delay(1000);
	ssd1306_Fill(Black);
}

uint8_t Proccess_Pin() {

	if (strcmp(input, pin) == 0) {
		UART_Log_WithTime("Access Granted");

		ssd1306_Fill(Black);
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString("Access", Font_11x18, White);
		ssd1306_SetCursor(0, 18);
		ssd1306_WriteString("Granted...", Font_11x18, White);
		ssd1306_UpdateScreen();
		ssd1306_Fill(Black);
		HAL_Delay(1000);

		return 1;

	} else {
		UART_Log_WithTime("Access Denied");

		wrong_attempts --;

		char falsePinStr[10];
		sprintf(falsePinStr, "%d", wrong_attempts );

		if (wrong_attempts  == 0) {

			ssd1306_Fill(Black);
			ssd1306_SetCursor(0, 0);
			ssd1306_WriteString("False PIN ", Font_11x18, White);
			ssd1306_UpdateScreen();
			HAL_Delay(1000);

			UART_Log_WithTime("System Locked for 10 seconds.");

			system_locked = 1;
			HAL_TIM_Base_Start_IT(&htim2);  // 10 saniyelik timer'ı başlat

			wrong_attempts  = 3;

			return 0;
		}

		ssd1306_Fill(Black);
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString("False PIN ", Font_11x18, White);
		ssd1306_UpdateScreen();
		HAL_Delay(2000);
		ssd1306_Fill(Black);
		ssd1306_SetCursor(0, 0);
		ssd1306_WriteString("Remaining ", Font_11x18, White);
		ssd1306_SetCursor(0, 18);
		ssd1306_WriteString(falsePinStr, Font_11x18, White);
		ssd1306_SetCursor(22, 18);
		ssd1306_WriteString(" attempts ", Font_11x18, White);
		ssd1306_UpdateScreen();
		HAL_Delay(1000);
		ssd1306_Fill(Black);

		return 0;
	}

}
