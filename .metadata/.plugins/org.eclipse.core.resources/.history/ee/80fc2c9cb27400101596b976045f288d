#include <stdint.h>

#define RCC_BASEADDR				(0x40023800U)
#define RCC_AHB1ENR					(*(volatile uint32_t*)(RCC_BASEADDR + 0x30))

#define GPIOA_BASEADDR				(0x40020000U)
#define GPIOA_MODER					(*(volatile uint32_t*)(GPIOA_BASEADDR + 0x00))
#define GPIOA_OTYPER				(*(volatile uint32_t*)(GPIOA_BASEADDR + 0x04))
#define GPIOA_SPEEDR				(*(volatile uint32_t*)(GPIOA_BASEADDR + 0x08))
#define GPIOA_PUPDR					(*(volatile uint32_t*)(GPIOA_BASEADDR + 0x0C))
#define GPIOA_ODR					(*(volatile uint32_t*)(GPIOA_BASEADDR + 0x14))

void delay(volatile uint32_t count);

int main(void) {
	//1. Enable clock for GPIOA (bit 0 of RCC_AHB1ENR)
	RCC_AHB1ENR |= (0x01);

	//2. Configure PA5, PA6, PA7, PA8 as output
	// Clear mode bits for PA5  (bit 10:11), PA6, PA7, PA8 then set as output (01)

	for (int pin = 5; pin <= 7; pin++) {
		GPIOA_MODER &= ~(0x03 << (pin * 2));     // Clear mode bits
		GPIOA_MODER |= (0x01 << (pin * 2));		// Set output mode
	}

	// 3. Output type push-pull for PA5, PA6, PA7
	GPIOA_OTYPER &= ~((0x01 << 5) | (0x01 << 6) | (0x01 << 7) | (0x01 << 8));

	// 4. Medium speed for PA5, PA6, PA7
	for (int pin = 5; pin <= 7; pin++) {
		GPIOA_OSPEEDR &= ~(0x3 << (pin * 2));
		GPIOA_OSPEEDR |= (0x1 << (pin * 2));
	}

	// 5. No pull-up/pull-down for PA5, PA6, PA7
	for (int pin = 5; pin <= 7; pin++) {
		GPIOA_PUPDR &= ~(0x3 << (pin * 2));
	}

	while(1)
	{
		for (int pin = 5; pin < 8; ++pin) {
			GPIOA_ODR |= (0x01<<pin);		//LED ON
			delay(300000);
		}
		for (int pin = 5; pin < 8; ++pin) {
			GPIOA_ODR &= ~(0x01 <<pin);		//LED OFF
			delay(3000000);
		}
	}

}

void delay(volatile uint32_t count)
{
	while(count--)  { }
}
