
stm32_button_register_programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003d4  080003d4  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003d4  080003d4  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000013d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080003dc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  080003f4  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080003f4  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004f5  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000277  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  000027b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000101d  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000097b  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e73  00000000  00000000  0000422f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000080a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000128  00000000  00000000  000080e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003bc 	.word	0x080003bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080003bc 	.word	0x080003bc

080001d4 <Enable_GPIO_Clock>:
    (volatile uint32_t *)(GPIOC_BASE + 0x00),
    (volatile uint32_t *)(GPIOC_BASE + 0x10),
    (volatile uint32_t *)(GPIOC_BASE + 0x14)
};

void Enable_GPIO_Clock(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC_AHB1ENR |= (1 << 0) | (1 << 2);  // Enable GPIOA and GPIOC clocks
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <Enable_GPIO_Clock+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <Enable_GPIO_Clock+0x1c>)
 80001de:	f043 0305 	orr.w	r3, r3, #5
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40023830 	.word	0x40023830

080001f4 <GPIO_Config_Pin_Mode>:

void GPIO_Config_Pin_Mode(GPIO_Port *port, GPIO_Pin pin, GPIO_Mode mode) {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	460b      	mov	r3, r1
 80001fe:	70fb      	strb	r3, [r7, #3]
 8000200:	4613      	mov	r3, r2
 8000202:	70bb      	strb	r3, [r7, #2]
    *(port->MODER) &= ~(0x3 << (pin * 2));      // Clear mode bits for pin
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	78fb      	ldrb	r3, [r7, #3]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	2103      	movs	r1, #3
 8000210:	fa01 f303 	lsl.w	r3, r1, r3
 8000214:	43db      	mvns	r3, r3
 8000216:	4619      	mov	r1, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	400a      	ands	r2, r1
 800021e:	601a      	str	r2, [r3, #0]
    *(port->MODER) |=  ((uint32_t)mode << (pin * 2)); // Set mode bits
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	78ba      	ldrb	r2, [r7, #2]
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	409a      	lsls	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr

08000242 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_Port *port, GPIO_Pin pin) {
 8000242:	b480      	push	{r7}
 8000244:	b083      	sub	sp, #12
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	70fb      	strb	r3, [r7, #3]
    return ((*(port->IDR) & (1 << pin)) != 0);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	78fa      	ldrb	r2, [r7, #3]
 8000256:	2101      	movs	r1, #1
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	4013      	ands	r3, r2
 800025e:	2b00      	cmp	r3, #0
 8000260:	bf14      	ite	ne
 8000262:	2301      	movne	r3, #1
 8000264:	2300      	moveq	r3, #0
 8000266:	b2db      	uxtb	r3, r3
}
 8000268:	4618      	mov	r0, r3
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <GPIO_Set_Pin>:

void GPIO_Set_Pin(GPIO_Port *port, GPIO_Pin pin) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
    *(port->ODR) |= (1 << pin);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	4619      	mov	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	430a      	orrs	r2, r1
 8000296:	601a      	str	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <GPIO_Reset_Pin>:

void GPIO_Reset_Pin(GPIO_Port *port, GPIO_Pin pin) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
    *(port->ODR) &= ~(1 << pin);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	78fb      	ldrb	r3, [r7, #3]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	4619      	mov	r1, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	400a      	ands	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <main>:

#include <stdint.h>
#include "digital_input.h"


int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    Enable_GPIO_Clock();
 80002dc:	f7ff ff7a 	bl	80001d4 <Enable_GPIO_Clock>

    // Configure LED (GPIOA, Pin 5) as output
    GPIO_Config_Pin_Mode(&GPIOA, PIN_5, GPIO_MODE_OUTPUT);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2105      	movs	r1, #5
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <main+0x40>)
 80002e6:	f7ff ff85 	bl	80001f4 <GPIO_Config_Pin_Mode>

    // Configure Button (GPIOC, Pin 13) as input
    GPIO_Config_Pin_Mode(&GPIOC, PIN_13, GPIO_MODE_INPUT);
 80002ea:	2200      	movs	r2, #0
 80002ec:	210d      	movs	r1, #13
 80002ee:	480b      	ldr	r0, [pc, #44]	@ (800031c <main+0x44>)
 80002f0:	f7ff ff80 	bl	80001f4 <GPIO_Config_Pin_Mode>

    while (1) {
        if (GPIO_Read_Pin(&GPIOC, PIN_13) == 0) { // Button pressed (active low)
 80002f4:	210d      	movs	r1, #13
 80002f6:	4809      	ldr	r0, [pc, #36]	@ (800031c <main+0x44>)
 80002f8:	f7ff ffa3 	bl	8000242 <GPIO_Read_Pin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d104      	bne.n	800030c <main+0x34>
            GPIO_Set_Pin(&GPIOA, PIN_5);          // Turn on LED
 8000302:	2105      	movs	r1, #5
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <main+0x40>)
 8000306:	f7ff ffb5 	bl	8000274 <GPIO_Set_Pin>
 800030a:	e7f3      	b.n	80002f4 <main+0x1c>
        } else {
            GPIO_Reset_Pin(&GPIOA, PIN_5);        // Turn off LED
 800030c:	2105      	movs	r1, #5
 800030e:	4802      	ldr	r0, [pc, #8]	@ (8000318 <main+0x40>)
 8000310:	f7ff ffc8 	bl	80002a4 <GPIO_Reset_Pin>
        if (GPIO_Read_Pin(&GPIOC, PIN_13) == 0) { // Button pressed (active low)
 8000314:	e7ee      	b.n	80002f4 <main+0x1c>
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000
 800031c:	2000000c 	.word	0x2000000c

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	@ (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	@ (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	@ (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	@ (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000352:	f7ff ffc1 	bl	80002d8 <main>

08000356 <LoopForever>:

LoopForever:
  b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800036c:	20000034 	.word	0x20000034

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	@ (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	@ (80003b0 <__libc_init_array+0x3c>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2600      	movs	r6, #0
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	@ (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	@ (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2600      	movs	r6, #0
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
